import json
import yaml
from pathlib import Path

def load_file(file_path):
    """Загрузить JSON или YAML файл в словарь."""
    path = Path(file_path)
    ext = path.suffix.lower()
    with open(file_path) as f:
        if ext in (".json",):
            return json.load(f)
        elif ext in (".yml", ".yaml"):
            return yaml.safe_load(f)
        else:
            raise ValueError(f"Unsupported file format: {ext}")

def generate_diff(file_path1, file_path2):
    """Сравнить два файла и вернуть diff в виде списка словарей."""
    data1 = load_file(file_path1) or {}
    data2 = load_file(file_path2) or {}

    def build_diff(d1, d2):
        diff = []
        all_keys = sorted(set(d1) | set(d2))
        for key in all_keys:
            val1 = d1.get(key)
            val2 = d2.get(key)

            if isinstance(val1, dict) and isinstance(val2, dict):
                # вложенные словари
                children = build_diff(val1, val2)
                diff.append({"name": key, "action": "nested", "value": None, "children": children})
            elif key not in d1:
                diff.append({"name": key, "action": "added", "value": val2, "children": None})
            elif key not in d2:
                diff.append({"name": key, "action": "deleted", "value": val1, "children": None})
            elif val1 != val2:
                diff.append({"name": key, "action": "deleted", "value": val1, "children": None})
                diff.append({"name": key, "action": "added", "value": val2, "children": None})
            else:
                diff.append({"name": key, "action": "unchanged", "value": val1, "children": None})
        return diff

    return build_diff(data1, data2)










